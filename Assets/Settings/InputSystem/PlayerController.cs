//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputSystem/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Fighters.Match.Players
{
    public partial class @PlayerController: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""b90f1d1d-4c29-41ac-a931-0aa9241a1ad1"",
            ""actions"": [
                {
                    ""name"": ""Cast"",
                    ""type"": ""Value"",
                    ""id"": ""cd4ee27c-94b8-419f-a230-207c07f46cd1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""97cab9f7-6942-4bc7-9d39-787b3a9ed001"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BasicCast"",
                    ""type"": ""Button"",
                    ""id"": ""830bbda2-3ea9-4c93-9583-4deaabd217d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b7acd120-b6cd-479d-87c1-5e3e4fa4d9fc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""77221c64-78a3-4529-900c-403428053cc1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""75f8e29a-3249-4d61-8031-ac02cef8a5cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d55f7a14-27da-4329-a811-91bcd69bca6e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d52db680-de42-4785-906c-f802393e1ee7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""fe97fe39-6060-4f4f-87bd-e350a75dc8db"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dbcfcadd-b0c9-4d0c-94f2-eacbd0776d10"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0f50e7d7-152f-4375-b541-b016fee29a81"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1726591d-a5ac-42d0-a9c1-6a0e13437ad2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e3cb5906-b2b2-403e-a2ec-351a1f2d2601"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9480091d-aa55-47ae-8868-5d400dab2226"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Base
            m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
            m_Base_Cast = m_Base.FindAction("Cast", throwIfNotFound: true);
            m_Base_Move = m_Base.FindAction("Move", throwIfNotFound: true);
            m_Base_BasicCast = m_Base.FindAction("BasicCast", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Base
        private readonly InputActionMap m_Base;
        private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
        private readonly InputAction m_Base_Cast;
        private readonly InputAction m_Base_Move;
        private readonly InputAction m_Base_BasicCast;
        public struct BaseActions
        {
            private @PlayerController m_Wrapper;
            public BaseActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Cast => m_Wrapper.m_Base_Cast;
            public InputAction @Move => m_Wrapper.m_Base_Move;
            public InputAction @BasicCast => m_Wrapper.m_Base_BasicCast;
            public InputActionMap Get() { return m_Wrapper.m_Base; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
            public void AddCallbacks(IBaseActions instance)
            {
                if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
                @Cast.started += instance.OnCast;
                @Cast.performed += instance.OnCast;
                @Cast.canceled += instance.OnCast;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @BasicCast.started += instance.OnBasicCast;
                @BasicCast.performed += instance.OnBasicCast;
                @BasicCast.canceled += instance.OnBasicCast;
            }

            private void UnregisterCallbacks(IBaseActions instance)
            {
                @Cast.started -= instance.OnCast;
                @Cast.performed -= instance.OnCast;
                @Cast.canceled -= instance.OnCast;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @BasicCast.started -= instance.OnBasicCast;
                @BasicCast.performed -= instance.OnBasicCast;
                @BasicCast.canceled -= instance.OnBasicCast;
            }

            public void RemoveCallbacks(IBaseActions instance)
            {
                if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBaseActions instance)
            {
                foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BaseActions @Base => new BaseActions(this);
        public interface IBaseActions
        {
            void OnCast(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnBasicCast(InputAction.CallbackContext context);
        }
    }
}
